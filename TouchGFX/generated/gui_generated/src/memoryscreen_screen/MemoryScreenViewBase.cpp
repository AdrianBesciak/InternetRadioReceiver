/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/memoryscreen_screen/MemoryScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

MemoryScreenViewBase::MemoryScreenViewBase() :
    updateItemCallback(this, &MemoryScreenViewBase::updateItemCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    controlPanel.setXY(65, 200);

    timePanel.setXY(28, 160);

    titleView.setXY(40, 125);

    volumePanel.setXY(95, 15);

    peripheralStateIndicators.setXY(370, 10);

    sdCardIcon.setXY(20, 20);
    sdCardIcon.setBitmap(touchgfx::Bitmap(BITMAP_RAW_MICRO_SD_ID));

    slideMenuRight.setup(touchgfx::SlideMenu::WEST,
        touchgfx::Bitmap(BITMAP_RIGHT_SLIDE_MENU_BACKGROUND_ID),
        touchgfx::Bitmap(BITMAP_RIGHT_SLIDE_MENU_BUTTON_ID),
        touchgfx::Bitmap(BITMAP_RIGHT_SLIDE_MENU_BUTTON_ID),
        18, 0, 0, 110);
    slideMenuRight.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenuRight.setVisiblePixelsWhenCollapsed(25);
    slideMenuRight.setHiddenPixelsWhenExpanded(0);
    slideMenuRight.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    slideMenuRight.setAnimationDuration(18);
    slideMenuRight.setExpandedStateTimeout(180);
    slideMenuRight.setXY(278, 0);

    PlayQueue.setPosition(27, 2, 170, 272);
    PlayQueue.setHorizontal(false);
    PlayQueue.setCircular(true);
    PlayQueue.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    PlayQueue.setSwipeAcceleration(10);
    PlayQueue.setDragAcceleration(10);
    PlayQueue.setNumberOfItems(20);
    PlayQueue.setSelectedItemOffset(14);
    PlayQueue.setSelectedItemExtraSize(0, 0);
    PlayQueue.setSelectedItemMargin(2, 2);
    PlayQueue.setDrawableSize(30, 0);
    PlayQueue.setDrawables(PlayQueueListItems, updateItemCallback,
                              PlayQueueSelectedListItems, updateItemCallback);
    PlayQueue.animateToItem(10, 0);
    slideMenuRight.add(PlayQueue);

    screenNavigator.setXY(0, 0);

    add(__background);
    add(controlPanel);
    add(timePanel);
    add(titleView);
    add(volumePanel);
    add(peripheralStateIndicators);
    add(sdCardIcon);
    add(slideMenuRight);
    add(screenNavigator);
}

void MemoryScreenViewBase::setupScreen()
{
    controlPanel.initialize();
    timePanel.initialize();
    titleView.initialize();
    volumePanel.initialize();
    peripheralStateIndicators.initialize();
    PlayQueue.initialize();
    for (int i = 0; i < PlayQueueListItems.getNumberOfDrawables(); i++)
    {
        PlayQueueListItems[i].initialize();
    }
    for (int i = 0; i < PlayQueueSelectedListItems.getNumberOfDrawables(); i++)
    {
        PlayQueueSelectedListItems[i].initialize();
    }
    screenNavigator.initialize();
}

void MemoryScreenViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &PlayQueueListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        listItem_notSelected* cc = (listItem_notSelected*)d;
        PlayQueueUpdateItem(*cc, itemIndex);
    }
    else if (items == &PlayQueueSelectedListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        listItem_selected* cc = (listItem_selected*)d;
        PlayQueueUpdateCenterItem(*cc, itemIndex);
    }
}
